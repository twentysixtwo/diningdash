Kalev Roomann-Kurrik
Software Engineering Final Project
User Interface Subsystem Design

1.) LoginUI
operation: "click on Login button"
- checks input data versus data from RecordKeeper
- need to be able to pull employee data from RecordKeeper
- Then creates a new UI object for the type of employee

- Need a function in RecordKeeper that can check employee name and password
and return the type of employee if valid

2.) HostUI
operation: "click on open table to seat"
- first need to select number of diners from drop-down menu
- then click on open table
- need to check status of Table
- then need to check number of diners versus maximum diners allowed for that Table
- if both conditions ok then change status of Table from open to occupied

- Need to be able to check status of table
- Need to be able to check max number of diners allowed for that table
- Need to be able to change status of table

- The UI will call a "seat_Table(Table a_Table, int num_Diners)" function from the Host Account class
- return type is int, should return 1 on successful seating, otherwise return 0
- This should then take care of trying to seat the Table
- The UI will pass the correct Table by accessing the Map class which contains the Table objects

3.) BusboyUI
operation: "click on dirty table to clean"
- need to check status of Table and make sure it is actually dirty
- then need to change status of table from dirty to unoccupied

- The UI will call a "clean_Table(Table a_Table)" function from the Busboy Account class.
- return type is int, should return 1 on successful cleaning of table, otherwise return 0
- Like with the HostUI, the correct Table will be passed by having the BusboyUI class look at the Map to get the correct table.
- So any UI class modifying a table will need a method to get a Table from the Map (need
to work with Henry/Maureen on figuring this part out)
- clean_Table function from Busboy Account class should check status of Table to
make sure that it is actually dirty, and if so change it to unoccupied.
- Every change to a Table that is contained in the Map class needs to be updated in the
UI

4.) WaiterUI
operation: "click on a Table on the Map"
- should bring up a display of the Bill for that Table on one side of the WaiterUI window

- need a function in the Waiter Account class which gets the Bill for a Table given the name of the Table (again the correct Table will be found from the Map class and passed)
- so need a "get_Bill(Table a_Table)" function in the Waiter Account class.
- return type is Bill
- then the WaiterUI class will display the Bill

- there should be a drop_down menu in the WaiterUI that has all of the menu item names that it gets from RecordKeeper once the WaiterUI window is created
- so in the constructor for WaiterUI need to be passed a reference to RecordKeeper?
- then call a function from this reference, something like "get_menu()" that returns some array or list of food name strings that it got from the database


operation: "select dish name from menu, add comments in textbox (optional), and click 'add order' button"
- should call a function in the Waiter Account class, something like "add_Dish(String name, String comment, Bill the_Bill)"
- This should create a new Order object.
- The constructor for Order should take in the name String, and comment String.
- The boolean is_Cooked will be set to False to start
- The price for the order will be returned from list of food names and prices in the database.
- Inside the "add_Dish" function in the Waiter Account class, after this order is created it should be added to the Bill object passed.
- So Bill needs some function where it's passed an Order object and it adds it to its list of Order objects.
- When this happens the WaiterUI should have the new Order show up on the Bill for that Table.
- At the same time when this operation occurs the queue of Orders in the Kitchen class should be updated with this order.
- So as a Waiter adds orders onto a Bill for a Table they're automatically sent to the Kitchen
- So the Waiter Account class should have a reference to the Kitchen object
- and when the "add_Dish" function is called it should sent a reference to the Order object and the Bill object to the Kitchen as well.
- so Kitchen needs a function "add_Order(Order the_Order, Bill the_Bill)"
- Once the order has been cooked it's status should change to is_Cooked = True and this should be displayed on the Bill for the Table


operation: "select dish on Bill list of orders, click 'remove order' button"
- should call a function in the Waiter Account class, something like "remove_Dish(String name, String comment, Bill the_Bill)"
- This should in turn call a function in the Bill class, some sort of "remove_Order(String name, String comment)" function
- This will find the correct Order object in the list of Order objects for that specific Bill, and remove it from the list
- Once the Order is removed from the Bill it should be reflected in the WaiterUI


operation: "set status of Table to dirty"
- There will be a button underneath the Bill for the Table that says "Dirty Table"
- This will change the status of the Table to dirty, and set number of diners=0
- This will be done through the Map class and be reflected in the UI
- The Bill for this Table should then be sent into the RecordKeeper
- need some function in RecordKeeper "add_Bill(Bill the_Bill)"
- It will add in that Bill to the Database
- probably don't need a function in Waiter Account class, UI should be able to handle this...


5.) ChefUI
operation: "take an Order off of Kitchen Queue and put on Chef's Queue"
- The Chef's UI will just be two lists, one of the orders in the kitchen, and one of the orders in the chef's queue
- There will be an Add button below the Kitchen queue that will remove an Order off of the Kitchen queue and put it on the Chef's queue
- need a function in the Chef Account class that is passed a specific Order object and a Bill object that the Order belongs to
- something like "add_Order(Order the_Order, Bill the_Bill)"

!!!!!
- that OR, every Order should have a reference to its Bill object
- Since an Order can't exist without a Bill this would work best
- so "add_Order(Order the_Order)"
- and inside the Order class there will be a Bill field
- "Bill this_orders_bill" for example
- which will be set in the Order constructor
!!!!!

- When that button is clicked the Order object should disappear off of the Kitchen queue and appear on the Chef's Queue
- I guess the Chef Account class will have some sort of list of Orders
- as Orders are added or removed the UI will be updated


operation: "take an Order off of the Chef's Queue (aka it's done)"
- need to select an entry off of the Chef's Queue
- Then click on a "Order Done" button below the Chef's Queue
- This will call a function in the Chef Account class "order_Done(Order the_Order)"
- This will remove the Order from the list in the Chef Account class (which will then be updated in the UI)
- But before doing that it must call a function in the Order class "set_Cooked()" which will set the parameter is_Cooked = True for that Order object.
- THEN the Order object will be removed from the list in the Chef Account class.
- If we only pass a reference to the Order to the Kitchen then when we change its status, it will also be changed in the Bill that the Order belongs to
- Then when a Waiter accesses their account and checks the Bill for that Order the status should be up to date
- So clicking on a Table in the Waiter UI should bring up the latest version of the Bill for that Table


6.) ManagerUI
operation: "change the Date"
- Displays a different page of Data from the Database
- The Manager Window should should which day it is (and option to change it)
- A list of Employees that logged in that day
- A list of Bills from that day
- and a window for each where detailed data will come up
- The Employee window should show their name, hours worked, and bills ?
- The Bill window should show the bill just like it appears in the WaiterUI window
- There will drop down menus for Day, Month, Year
- Changing any one of them will cause the window to display the data for that day
- so any action on those drop down menus needs to call a function from the Manager Account class, something like "display_data(int day, int month, int year)"
- This will need to somehow return both a list of employees for that day and a list of bills
- What it should do is call a function in RecordKeeper that does that...
- Then the UI updates the Employee and Bill lists

operation: "click on employee name in list"
- will display employee data in smaller window in the Manager window
- so the UI will need to get the data for that employee
- need to go over exactly what data we should display
- number of tables covered?
- total from Bills?

operation: "click on Bill in list"
- will display the Bill like it was displayed in the WaiterUI window
- so UI needs to get Bill just like it did for WaiterUI and display it the same way



Ok....I think that's an overview of everything....sorry I was a little rushed writing this. Please email me with any questions/thoughts/inspirational messages, etc.

I'm going to do the Javadocs tonight for the UI classes, but if you have any changes I'll implement them, and we can go over more changes tomorrow, but this way everyone should be on the same page.

- Kalev
